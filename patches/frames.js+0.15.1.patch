diff --git a/node_modules/frames.js/dist/next/esm/index.js b/node_modules/frames‚Äçjs/dist/next/esm/index.js
index 923112d..e8a3a91 100644
--- a/node_modules/frames.js/dist/next/esm/index.js
+++ b/node_modules/frames.js/dist/next/esm/index.js
@@ -1,5 +1,5 @@
 import { FramesStack, getFrame, getFrameFlattened, getFrameHtml, getFrameMessage, validateFrameMessage } from '../../core/index.js';
-import { NextResponse } from 'next/server.js';
+import { NextResponse, NextRequest as NextRequest$1 } from 'next/server.js';
 import { renderToStaticMarkup } from 'react-dom/server';
 
 /**
@@ -21,11 +21,18 @@
  * @returns a promise that resolves to a `NextResponse`
  */
 async function GET(req) {
-    return handleRequest(req, options);
+    // Next.js is now passing the whole request object to the handler.
+    // This is a workaround to support both old and new versions.
+    // We are now also passing `NextRequest` to `createFrames` so we can use it to create a new request if needed.
+    const internalRequest = req instanceof NextRequest$1
+        ? req
+        : // @ts-expect-error
+            new NextRequest$1(req.url, {
+                headers: req.headers,
+            });
+    return handleRequest(internalRequest, options);
 }
 /**
  * This is a handler for `POST` requests. It is used to handle `POST` requests from Farcaster frames.
  * @param req - a `Request` object
  * @returns a promise that resolves to a `NextResponse`
  */
-function POST(req) {
-    return handleRequest(req, options);
+async function POST(req) {
+    // Next.js is now passing the whole request object to the handler.
+    // This is a workaround to support both old and new versions.
+    // We are now also passing `NextRequest` to `createFrames` so we can use it to create a new request if needed.
+    const internalRequest = req instanceof NextRequest$1
+        ? req
+        : // @ts-expect-error
+            new NextRequest$1(req.url, {
+                headers: req.headers,
+                body: req.body,
+                method: "POST",
+                // @ts-expect-error
+                duplex: "half",
+            });
+    return handleRequest(internalRequest, options);
 }
 /**
  * This is a handler that can be used to handle both `GET` and `POST` requests.
diff --git a/node_modules/frames.js/dist/next/esm/index.mjs b/node_modules/frames.js/dist/next/esm/index.mjs
index 9e9aa84..558a7da 100644
--- a/node_modules/frames.js/dist/next/esm/index.mjs
+++ b/node_modules/frames.js/dist/next/esm/index.mjs
@@ -1,5 +1,5 @@
 import { FramesStack, getFrame, getFrameFlattened, getFrameHtml, getFrameMessage, validateFrameMessage } from '../../core/index.mjs';
-import { NextResponse } from 'next/server.js';
+import { NextResponse, NextRequest as NextRequest$1 } from 'next/server.js';
 import { renderToStaticMarkup } from 'react-dom/server';
 
 /**
@@ -21,11 +21,18 @@
  * @returns a promise that resolves to a `NextResponse`
  */
 async function GET(req) {
-    return handleRequest(req, options);
+    // Next.js is now passing the whole request object to the handler.
+    // This is a workaround to support both old and new versions.
+    // We are now also passing `NextRequest` to `createFrames` so we can use it to create a new request if needed.
+    const internalRequest = req instanceof NextRequest$1
+        ? req
+        : // @ts-expect-error
+            new NextRequest$1(req.url, {
+                headers: req.headers,
+            });
+    return handleRequest(internalRequest, options);
 }
 /**
  * This is a handler for `POST` requests. It is used to handle `POST` requests from Farcaster frames.
  * @param req - a `Request` object
  * @returns a promise that resolves to a `NextResponse`
  */
-function POST(req) {
-    return handleRequest(req, options);
+async function POST(req) {
+    // Next.js is now passing the whole request object to the handler.
+    // This is a workaround to support both old and new versions.
+    // We are now also passing `NextRequest` to `createFrames` so we can use it to create a new request if needed.
+    const internalRequest = req instanceof NextRequest$1
+        ? req
+        : // @ts-expect-error
+            new NextRequest$1(req.url, {
+                headers: req.headers,
+                body: req.body,
+                method: "POST",
+                // @ts-expect-error
+                duplex: "half",
+            });
+    return handleRequest(internalRequest, options);
 }
 /**
  * This is a handler that can be used to handle both `GET` and `POST` requests.
diff --git a/node_modules/frames.js/package.json b/node_modules/frames.js/package.json
index 5816997..b2d0718 100644
--- a/node_modules/frames.js/package.json
+++ b/node_modules/frames.js/package.json
@@ -62,7 +62,7 @@
   "peerDependencies": {
     "@types/react": "^18.2.42",
     "@types/react-dom": "^18.2.17",
-    "next": "^14.1.0",
+    "next": "^14.1.0 || ^15.0.0-rc.0",
     "react": "^18.2.0",
     "react-dom": "^18.2.0"
   },